/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rmi.client;

import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author juan llanos
 */
public final class IngresoGUI extends javax.swing.JFrame {

    private IngresoControlador controlador;
    private String ipServidor;

    public IngresoGUI() {
        this.controlador = new IngresoControlador(this);
        initComponents();

    }

    /**
     * @return the btbIngresar
     */
    public javax.swing.JButton getBtbIngresar() {
        return btbIngresar;
    }

    /**
     * @param btbIngresar the btbIngresar to set
     */
    public void setBtbIngresar(javax.swing.JButton btbIngresar) {
        this.btbIngresar = btbIngresar;
    }

    /**
     * @return the txtNombre
     */
    public javax.swing.JTextField getTxtNombre() {
        return txtNombre;
    }

    /**
     * @param txtNombre the txtNombre to set
     */
    public void setTxtNombre(javax.swing.JTextField txtNombre) {
        this.txtNombre = txtNombre;
    }

    /**
     * Creates new form GUIIngreso
     *
     * /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btbIngresar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblIPServidor = new javax.swing.JLabel();
        txtIPServidor = new javax.swing.JTextField();
        jCheckBoxLocal = new javax.swing.JCheckBox();
        jCheckBoxExterna = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 204));
        setForeground(new java.awt.Color(255, 255, 204));

        jLabel1.setText("Nombre de Usuario :");

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        jLabel2.setText("Iniciar Sesión - WhatsApp");

        btbIngresar.setText("Ingresar");
        btbIngresar.setEnabled(false);
        btbIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbIngresarActionPerformed(evt);
            }
        });

        jLabel3.setText("Seleccionar tipo de conexión:");

        lblIPServidor.setText("Digite IP del servidor:");

        txtIPServidor.setEnabled(false);
        txtIPServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIPServidorActionPerformed(evt);
            }
        });

        jCheckBoxLocal.setText("Local");
        jCheckBoxLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLocalActionPerformed(evt);
            }
        });

        jCheckBoxExterna.setText("Externa");
        jCheckBoxExterna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxExternaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxLocal)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxExterna)
                                .addGap(21, 21, 21)
                                .addComponent(lblIPServidor))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIPServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(btbIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxLocal)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIPServidor)
                    .addComponent(jCheckBoxExterna))
                .addGap(12, 12, 12)
                .addComponent(txtIPServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btbIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btbIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbIngresarActionPerformed
        try {
            if (jCheckBoxExterna.isSelected() && !txtIPServidor.getText().trim().isEmpty()) {
                setIpServidor(txtIPServidor.getText().trim());
                controlador.ingresarServer();
            } else if (jCheckBoxLocal.isSelected()) {
                controlador.ingresarServer();
            }
        } catch (RemoteException ex) {
            Logger.getLogger(IngresoGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(IngresoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btbIngresarActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtIPServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIPServidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIPServidorActionPerformed

    private void jCheckBoxLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLocalActionPerformed
        if (jCheckBoxLocal.isSelected()) {
            jCheckBoxExterna.setSelected(false);
            txtIPServidor.setEnabled(false);
            txtIPServidor.setText("");
            btbIngresar.setEnabled(true);
            ipServidor = "localhost";
        }
    }//GEN-LAST:event_jCheckBoxLocalActionPerformed

    private void jCheckBoxExternaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxExternaActionPerformed
        if (jCheckBoxExterna.isSelected()) {
            jCheckBoxLocal.setSelected(false);
            txtIPServidor.setEnabled(true);
            btbIngresar.setEnabled(true);
            
        }
    }//GEN-LAST:event_jCheckBoxExternaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                IngresoGUI v = new IngresoGUI();
                v.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btbIngresar;
    private javax.swing.JCheckBox jCheckBoxExterna;
    private javax.swing.JCheckBox jCheckBoxLocal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblIPServidor;
    private javax.swing.JTextField txtIPServidor;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    /**
     * @param ingreso the ingreso to set
     */
    public void setIngreso(IngresoControlador ingreso) {

        this.controlador = ingreso;
    }

    /**
     * @return the IpServidor
     */
    public String getIpServidor() {
        return ipServidor;
    }

    /**
     * @param IpServidor the IpServidor to set
     */
    public void setIpServidor(String IpServidor) {
        this.ipServidor = IpServidor;
    }
    
    private void validarBotonIngresar() {
    boolean nombreValido = !txtNombre.getText().trim().isEmpty();
    boolean conexionValida = false;
    
    if (jCheckBoxLocal.isSelected()) {
        conexionValida = true;
    } else if (jCheckBoxExterna.isSelected()) {
        conexionValida = !txtIPServidor.getText().trim().isEmpty();
    }
    
    btbIngresar.setEnabled(nombreValido && conexionValida);
}
}
