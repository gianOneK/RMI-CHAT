/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rmi.client;

import java.awt.Component;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Usuario
 */
public class ChatGUI extends javax.swing.JFrame {

    private DefaultListModel<String> userModel = new DefaultListModel<>();
    private Map<String, DefaultListModel<Mensaje>> chats = new HashMap<>();

// En tu constructor o método init:
    private ChatControlador controlador;

    /**
     */
    public ChatGUI() throws Exception {
        initComponents();
        controlador = new ChatControlador(this);

        // Configuro lstChat para que use mi renderer y modelo dinámico
        listPersonasOnline.setModel(userModel);
        lstChat.setCellRenderer(new MensajeRenderer());
        lstChat.setFixedCellHeight(-1);  // permitir altura variable

        // Listener de selección de usuario
        listPersonasOnline.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    String usuario = listPersonasOnline.getSelectedValue();
                    if (usuario != null) {
                        // Si no hay modelo para ese usuario, lo creo
                        chats.putIfAbsent(usuario, new DefaultListModel<>());
                        // Cambio el modelo de lstChat
                        lstChat.setModel(chats.get(usuario));
                    }
                }
            }
        });

    }

    /**
     * Este método lo llama ThreadChatActualizar cada segundo
     */
    public void refrescarMensajes(Map<String, ArrayList<String[]>> todosLosMensajes) {
        // todosLosMensajes: clave=contacto, valor=lista de {remitente,texto,fecha}
        for (Map.Entry<String, ArrayList<String[]>> entry : todosLosMensajes.entrySet()) {
            String contacto = entry.getKey();
            chats.putIfAbsent(contacto, new DefaultListModel<>());

            for (String[] msgArr : entry.getValue()) {
                String remitente = msgArr[0];
                String texto = msgArr[1];
                String fecha = msgArr[2];
                chats.get(contacto).addElement(new Mensaje(remitente, texto, fecha));
            }

            // Si estoy viendo ese chat, actualizo la vista y hago scroll
            if (contacto.equals(listPersonasOnline.getSelectedValue())) {
                lstChat.ensureIndexIsVisible(lstChat.getModel().getSize() - 1);
            }
        }
    }

    public void actulizarListado(List<String> usuarios) {
        // 1) Build a Set de los nuevos usuarios para búsquedas rápidas
        Set<String> nuevos = new HashSet<>(usuarios);
        // 2) Build a Set de los actuales en el modelo
        Set<String> actuales = new HashSet<>();
        for (int i = 0; i < userModel.getSize(); i++) {
            actuales.add(userModel.getElementAt(i));
        }

        // 3) Eliminar los que ya no están
        for (int i = userModel.getSize() - 1; i >= 0; i--) {
            String elemento = userModel.getElementAt(i);
            if (!nuevos.contains(elemento)) {
                userModel.remove(i);
            }
        }

        // 4) Añadir los que faltan
        for (String u : usuarios) {
            if (!actuales.contains(u)) {
                userModel.addElement(u);
            }
        }

        // 5) Asegurarte de que la selección sigue siendo válida
        String seleccionado = listPersonasOnline.getSelectedValue();
        if (seleccionado != null && nuevos.contains(seleccionado)) {
            listPersonasOnline.setSelectedValue(seleccionado, true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listPersonasOnline = new javax.swing.JList<>();
        btnChatGlobal = new javax.swing.JButton();
        txtEnviarMensaje = new javax.swing.JTextField();
        btnEnviarMensaje = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BtbSalir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstChat = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(" wHA");
        setLocation(new java.awt.Point(0, 0));

        listPersonasOnline.setModel(new DefaultListModel<>());
        jScrollPane1.setViewportView(listPersonasOnline);

        btnChatGlobal.setText("Chat Global");

        txtEnviarMensaje.setToolTipText("Escribe...");

        btnEnviarMensaje.setText("->");
        btnEnviarMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarMensajeActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("WHATSAPP");

        BtbSalir.setText("Salir");

        lstChat.setModel(new DefaultListModel<>());
        jScrollPane2.setViewportView(lstChat);

        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnChatGlobal, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(BtbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtEnviarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEnviarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnChatGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(BtbSalir)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEnviarMensaje, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .addComponent(txtEnviarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarMensajeActionPerformed
        try {
            System.out.println("1");
            String texto = txtEnviarMensaje.getText().trim();
            System.out.println("2");
            String destino = listPersonasOnline.getSelectedValue();
            System.out.println("3");
            if (!texto.isEmpty() && destino != null) {
                System.out.println("4");
                // 1) Enviar por RMI
                controlador.enviarMensajeDirecto(destino, texto);
                System.out.println("5");
                // 2) Añadir al propio modelo (para verlo instantáneo)
                DefaultListModel<Mensaje> modelo = chats.get(destino);
                System.out.println("6");

                txtEnviarMensaje.setText("");
                // Hacer scroll al final
                lstChat.ensureIndexIsVisible(modelo.getSize() - 1);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("error btnMensajes");
        }
    }//GEN-LAST:event_btnEnviarMensajeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ChatGUI().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtbSalir;
    private javax.swing.JButton btnChatGlobal;
    private javax.swing.JButton btnEnviarMensaje;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listPersonasOnline;
    private javax.swing.JList<Mensaje> lstChat;
    private javax.swing.JTextField txtEnviarMensaje;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the BtbSalir
     */
    public javax.swing.JButton getBtbSalir() {
        return BtbSalir;
    }

}
